
# ------------------------------------------------
# 名称：HockDetector
# 功能：钩子检测算法.
# 状态：可能不再使用
# 作者：王杰  编写 2020-3-xx  修改 2020-6-xx
# ------------------------------------------------
class HockDetector(BaseDetector):

	def __init__(self):
		super().__init__()
		self.hock = None
		self._roi = None
		self.mask = None
		self.has_init = False #用来判断是否初始化卡尔曼变量
		self.has_update = False #用来判断是否已经更新卡尔曼数值
		self.has_stable = False #用来判断卡尔曼数值是否已经稳定

	def load_or_update_position(self, p_tu=None):
		if self.has_init == False:
			self.kalman = cv2.KalmanFilter(2, 2)
			self.kalman.measurementMatrix = np.array([[1, 0], [0, 1]], np.float32)
			self.kalman.transitionMatrix = np.array([[1, 0], [0, 1]], np.float32)
			self.kalman.processNoiseCov = np.array([[1, 0], [0, 1]], np.float32) * 1e-3
			self.kalman.measurementNoiseCov = np.array([[1, 0], [0, 1]], np.float32) * 0.01
			self.has_init = True

		if p_tu is not None:

			x, y = self.get_predict()
			if abs(x - p_tu[0]) < 100 and abs(y - p_tu[1]) < 100:
				self.has_stable = True
			else:
			    #卡尔曼数值稳定性 要时刻的判断才行，稳定性判断依据是 真实值与测试值 差距较小
				self.has_stable=False
			pos = np.array([*p_tu], dtype=np.float32)
			mes = np.reshape(pos, (2, 1))
			self.kalman.correct(mes)
			self.has_update = True

	def get_predict(self):
		guass_position = self.kalman.predict()
		x, y = int(guass_position[0][0]), int(guass_position[1][0])
		return x, y






下面开始使用卡尔曼滤波器：

self.hock = Hock(biggest_c)
if self.has_stable == True:
	x, y = self.get_predict()
	if abs(x - cent_x) > 100 or abs(y - cent_y) > 100:
		self.hock.set_position(x, y)
		self.load_or_update_position((x, y))
	else:
		self.hock.set_position(cent_x, cent_y)
		self.load_or_update_position((cent_x, cent_y))
	else:
		self.hock.set_position(cent_x, cent_y)
		self.load_or_update_position((cent_x, cent_y))

	self.hock.modify_box_content()
	# self.kalman.correct(mes)
	guass_position = self.get_predict()
	print("预测值：({},{})".format(guass_position[0], guass_position[1]))
	print("真实值：({},{})".format(self.hock.center_x, self.hock.center_y))