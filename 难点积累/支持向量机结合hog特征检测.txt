
from core.target_detect.pointlocation import PointLocationService, ONLY_LANDMARK, BAG_AND_LANDMARK
from core.target_detect.svmclassify import SvmClass, AnnClass



def hug_svm_detect_contours():
	win_size = (48, 96)  # 检测窗口大小（检测对象的最小尺寸48 * 96）
	block_size = (16, 16)  # （每个块最大为16 * 16）
	block_stride = (8, 8)  # 单元格尺寸
	cell_size = (8, 8)  # （从一个单元格移动8*8像素到另外一个单元格）
	num_bins = 9  # 对于每一个单元格，统计9个方向的梯度直方图。
	hog = cv2.HOGDescriptor(win_size, block_size, block_stride, cell_size, num_bins)
	land_mark_dir = "imgs/land_mark/"  # 设置正负数据集所在的位置
	x_lands = []
	for landfile in os.listdir(land_mark_dir):  # 在0到900张图片中随机挑选400张图片
		filename = "{dir}/{i}".format(dir=land_mark_dir, i=landfile)
		print(filename)
		img = cv2.imread(filename)
		img = cv2.resize(img, (50, 50))
		if img is None:
			print('Could not find image %s' % filename)
			continue
		x_lands.append(hog.compute(img, (64, 64)))  # 利用HOG进行计算
	train_lands = np.array(x_lands, dtype=np.float32)  # 数据类型转换，兼容OpenCv
	label_lands = np.ones(train_lands.shape[0], dtype=np.int32)  # 将训练样本赋值为1给y_pos

	othersdir = "imgs/others/"
	x_ohters = []
	for otherfile in os.listdir(othersdir):
		filename = '%s/%s' % (othersdir, otherfile)
		img = cv2.imread(filename)
		img = cv2.resize(img, (50, 50))
		x_ohters.append(hog.compute(img, (64, 64)))
	train_ohers = np.array(x_ohters, dtype=np.float32)  # 数据类型转换，兼容OpenCv
	lable_others = 3 * np.ones(train_ohers.shape[0], dtype=np.int32)  # 将训练样本赋值给y_neg   np.ones 填充1

	bagsdir = "imgs/bags/"
	x_bags = []
	for bagfile in os.listdir(bagsdir):
		filename = '%s/%s' % (bagsdir, bagfile)
		img = cv2.imread(filename)
		img = cv2.resize(img, (50, 50))
		x_bags.append(hog.compute(img, (64, 64)))
	train_bags = np.array(x_bags, dtype=np.float32)  # 数据类型转换，兼容OpenCv
	lable_bags = 2 * np.ones(train_bags.shape[0], dtype=np.int32)  # 将训练样本赋值给y_neg   np.ones 填充1

	# 将X 和Y （正样本和负样本）合并
	# x = np.concatenate((x_pos, x_neg))
	# y = np.concatenate((y_pos, y_neg))
	trainingData = np.concatenate((train_lands, train_ohers, train_bags))  # 数据集一定要设置成浮点型

	# trainingData = np.array(
	# 	[[10, 3], [5, 0.5], [10, 5], [0.5, 10], [0.5, 1.6], [3, 6], [1.2, 4], [6, 6], [0.9, 5], [4, 4]],
	# 	dtype='float32');  # 数据集一定要设置成浮点型
	labels = np.concatenate((label_lands, lable_others, lable_bags))
	# labels = (1, -1, 1, 1, -1, -1, -1, 1, -1, -1)
	# labels = np.array(labels)

	# labels转换成10行1列的矩阵
	# labels = labels.reshape(10, 1)
	# trainingData转换成10行2列的矩阵
	# trainingData = trainingData.reshape(10, 2)

	# 创建分类器
	svm =SvmClass(trainingData,labels)

	ret = svm.trainData()

	im = cv2.imread('imgs/test/bag1.bmp')
	# 预处理部分
	colorlow = (61, 83, 31)
	colorhigh = (81, 255, 250)
	colormin, colormax = np.array(colorlow), np.array(colorhigh)
	hsv = cv2.cvtColor(im, cv2.COLOR_BGR2HSV)
	# 去除颜色范围外的其余颜色
	mask = cv2.inRange(hsv, colormin, colormax)
	ret, binary = cv2.threshold(mask, 0, 255, cv2.THRESH_BINARY)
	# 去噪
	binary = cv2.medianBlur(binary, 3)

	cv2.namedWindow("binary", 0)
	cv2.imshow("binary", binary)

	contours, hierarchy = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
	moderatesize_countours = []
	moderatesize_rects = []
	boxindex = 0
	for countour in contours:
		countour_rect = cv2.boundingRect(countour)
		rect_x, rect_y, rect_w, rect_h = countour_rect
		if rect_w > 25 and rect_h > 25 and cv2.contourArea(countour) > 300:
			moderatesize_rects.append(countour_rect)
			moderatesize_countours.append(countour)

			testimg = im[rect_y + 1:rect_h + rect_y, rect_x + 1:rect_w + rect_x]
			testimg = cv2.resize(testimg, (50, 50))
			testfeature = hog.compute(testimg, (64, 64))
			testfeature = np.array([testfeature], dtype=np.float32)
			(ret, res) = svm.predictData(testfeature)
			print(ret, str(int(res[0][0])))
			cv2.putText(im, "res:{}".format(str(int(res[0][0]))),
			            (int(rect_x + 0.5 * rect_w + 50), int(rect_y + 0.5 * rect_h + 50)),
			            cv2.FONT_HERSHEY_SIMPLEX, 1, (65, 105, 225), 2)

	# for feature, rect in zip(testfeatures, rects):
	# 	pass

	cv2.drawContours(im, moderatesize_countours, -1, (0, 255, 0), 1)

	cv2.namedWindow("im", 0)
	cv2.imshow("im", im)
	cv2.waitKey(0)
	cv2.destroyAllWindows()
# from objectdetect1 import hog
def hug_svm_test():
	# 效果较好
	win_size = (48, 96)  # 检测窗口大小（检测对象的最小尺寸48 * 96）
	block_size = (16, 16)  # （每个块最大为16 * 16）
	block_stride = (8, 8)  # 单元格尺寸
	cell_size = (8, 8)  # （从一个单元格移动8*8像素到另外一个单元格）
	num_bins = 10  # 对于每一个单元格，统计9个方向的梯度直方图。
	hog = cv2.HOGDescriptor(win_size, block_size, block_stride, cell_size, num_bins)
	land_mark_dir = "C:/work/imgs/land_mark"  # 设置正负数据集所在的位置
	x_lands = []
	for landfile in os.listdir(land_mark_dir):  # 在0到900张图片中随机挑选400张图片
		filename = "{dir}/{i}".format(dir=land_mark_dir, i=landfile)
		print(filename)
		img = cv2.imread(filename)
		img = cv2.resize(img, (512, 512))
		if img is None:
			print('Could not find image %s' % filename)
			continue
		x_lands.append(hog.compute(img, (64, 64)))  # 利用HOG进行计算
	train_lands = np.array(x_lands, dtype=np.float32)  # 数据类型转换，兼容OpenCv
	label_lands = np.ones(train_lands.shape[0], dtype=np.int32)  # 将训练样本赋值为1给y_pos

	othersdir = "C:/work/imgs/others/"
	x_ohters = []
	for otherfile in os.listdir(othersdir):
		filename = '%s/%s' % (othersdir, otherfile)
		img = cv2.imread(filename)
		img = cv2.resize(img, (512, 512))
		x_ohters.append(hog.compute(img, (64, 64)))
	train_ohers = np.array(x_ohters, dtype=np.float32)  # 数据类型转换，兼容OpenCv
	lable_others = 3 * np.ones(train_ohers.shape[0], dtype=np.int32)  # 将训练样本赋值给y_neg   np.ones 填充1

	bagsdir = "C:/work/imgs/bags/"
	x_bags = []
	for bagfile in os.listdir(bagsdir):
		filename = '%s/%s' % (bagsdir, bagfile)
		img = cv2.imread(filename)
		img = cv2.resize(img, (512, 512))
		x_bags.append(hog.compute(img, (64, 64)))
	train_bags = np.array(x_bags, dtype=np.float32)  # 数据类型转换，兼容OpenCv
	lable_bags = 2 * np.ones(train_bags.shape[0], dtype=np.int32)  # 将训练样本赋值给y_neg   np.ones 填充1

	# 将X 和Y （正样本和负样本）合并
	# x = np.concatenate((x_pos, x_neg))
	# y = np.concatenate((y_pos, y_neg))
	trainingData = np.concatenate((train_lands, train_ohers, train_bags))  # 数据集一定要设置成浮点型

	# trainingData = np.array(
	# 	[[10, 3], [5, 0.5], [10, 5], [0.5, 10], [0.5, 1.6], [3, 6], [1.2, 4], [6, 6], [0.9, 5], [4, 4]],
	# 	dtype='float32');  # 数据集一定要设置成浮点型
	labels = np.concatenate((label_lands, lable_others, lable_bags))
	# labels = (1, -1, 1, 1, -1, -1, -1, 1, -1, -1)
	# labels = np.array(labels)

	# labels转换成10行1列的矩阵
	# labels = labels.reshape(10, 1)
	# trainingData转换成10行2列的矩阵
	# trainingData = trainingData.reshape(10, 2)

	# 创建分类器
	svm = cv2.ml.SVM_create()
	# 设置svm类型
	svm.setType(cv2.ml.SVM_C_SVC)
	# 核函数
	svm.setKernel(cv2.ml.SVM_LINEAR)
	# 训练
	ret = svm.train(trainingData, cv2.ml.ROW_SAMPLE, labels)

	# 测试数据
	# 取0-10之间的整数值
	# arrayTest = np.empty(shape=[0, 2], dtype='float32')
	# for i in range(10):
	# 	for j in range(10):
	# 		arrayTest = np.append(arrayTest, [[i, j]], axis=0)
	# pt = np.array(np.random.rand(50, 2) * 10, dtype='float32')  # np.random.rand(50,2) * 10可以替换成arrayTest

	filename = "C:/work/imgs/test/10.png"
	testimg = cv2.imread(filename)
	cv2.imshow("test", testimg)
	testimg = cv2.resize(testimg, (512, 512))
	testfeature = hog.compute(testimg, (64, 64))
	testfeature = np.array([testfeature], dtype=np.float32)
	# 预测
	(ret, res) = svm.predict(testfeature)
	print(ret, res)
	cv2.waitKey(0)
	cv2.destroyAllWindows()
