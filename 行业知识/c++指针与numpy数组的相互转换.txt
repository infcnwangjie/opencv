python numpy向c++ 传递图像数据：

#input 为python opencv 中图像数据，类型为numpy的数组
frame_data = np.asarray(input, dtype=np.uint8) 或者 		frame_data = np.array(input, dtype=np.uint8)
#通过numpy数组的ctypes.data_as将数组转化为c++ int * 或者char * 指针对象
frame_data = frame_data.ctypes.data_as(ctypes.c_char_p)





然后python 调用c++动态链接库：
OPENCV_SUPPLYDLL = cdll.LoadLibrary(
		"C:/NTY_IMG_PROCESS/dll/libOPENCV_SUPPLY.dll")
		
		
		
cls.OPENCV_SUPPLYDLL.find_it.restype = ctypes.POINTER(ctypes.c_uint8)

pointer = cls.OPENCV_SUPPLYDLL.find_it(frame_data,model_data,input_w,input_h,m_w,m_h)

最后我们将c++指针转化为python numpy,指定`count`以提高性能。 它允许``fromiter``
     预分配输出数组，而不是按需调整大小。:

result_img = np.array(np.fromiter(pointer, dtype=np.uint8, count=input_h * input_w))

得到的result_img为一维数组，为了正常显示图像，需要调用numpy的reshape方法：
destimg=result_img.reshape((input_h, input_w))

cv2.imshow('destimg', destimg)




然后c++代码如下所示：
unsigned char  *  find_it( unsigned char * image_meta , unsigned char * model_data,
                                                            int src_w ,int src_h,
                         int model_w,int model_h)
{

    cv::Mat image(src_h, src_w, CV_8UC3, image_meta);



    cv::Mat model(model_h, model_w, CV_8UC3, model_data);

    Mat model_hsv, image_hsv;
    cvtColor(model, model_hsv, COLOR_BGR2HSV);
    cvtColor(image, image_hsv, COLOR_BGR2HSV);

    // 定义直方图参数与属性
    int h_bins = 32; int s_bins = 32;
    int histSize[] = { h_bins, s_bins };
    // hue varies from 0 to 179, saturation from 0 to 255
    float h_ranges[] = { 0, 180 };
    float s_ranges[] = { 0, 256 };
    const float* ranges[] = { h_ranges, s_ranges };
    int channels[] = { 0, 1 };
    Mat roiHist;

    calcHist(&model_hsv, 1, channels, Mat(), roiHist, 2, histSize, ranges, true, false);
    normalize(roiHist, roiHist, 0, 256, NORM_MINMAX, -1, Mat());

    //计算反向投影
    Mat backproj;
    calcBackProject(&image_hsv, 1, channels, roiHist, backproj, ranges, 1.0);

   uchar* buffer = (uchar*)malloc(sizeof(uchar)*src_h*src_w);
   memcpy(buffer, backproj.data, src_h*src_w);
   return buffer;
}


CMakeLists.txt如下所示：
cmake_minimum_required(VERSION 3.5)

project(OPENCV_SUPPLY LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)


set(OpenCV_DIR "C:/OpenCV-MinGW-Build-OpenCV-4.0.1-x64")
set(OpenCV_INCLUDE_DIRS  "C:/OpenCV-MinGW-Build-OpenCV-4.0.1-x64/include" "C:/OpenCV-MinGW-Build-OpenCV-4.0.1-x64/include/opencv2")
set(OpenCV_LIBS "C:/OpenCV-MinGW-Build-OpenCV-4.0.1-x64/x64/mingw/bin")

include_directories( ${OpenCV_INCLUDE_DIRS} )
find_package( OpenCV REQUIRED )
link_directories(${OpenCV_LIBS})

find_package(Qt5 COMPONENTS Core REQUIRED)

add_library(OPENCV_SUPPLY SHARED
  OPENCV_SUPPLY_global.h
  opencv_supply.cpp
  opencv_supply.h
)

target_link_libraries(OPENCV_SUPPLY  ${OpenCV_LIBS} )
target_link_libraries(OPENCV_SUPPLY  Qt5::Core)

target_compile_definitions(OPENCV_SUPPLY PRIVATE OPENCV_SUPPLY_LIBRARY)


